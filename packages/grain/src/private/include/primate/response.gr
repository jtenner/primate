module Response

from "uri" include Uri
from "map" include Map
from "json" include Json
from "bytes" include Bytes

use Map.{ type Map }
use Json.{ type Json }
use Uri.{ type Uri }

provide enum HTTPStatus {
 	Continue,
 	SwitchingProtocols,
 	Processing,
 	EarlyHints,
 	UploadResumptionSupported,
 	OK,
 	Created,
 	Accepted,
 	NonAuthoritativeInformation,
 	NoContent,
 	ResetContent,
 	PartialContent,
 	MultiStatus,
 	AlreadyReported,
 	IMUsed,
 	MultipleChoices,
 	MovedPermanently,
 	Found,
 	SeeOther,
 	NotModified,
 	UseProxy,
 	TemporaryRedirect,
 	PermanentRedirect,
 	BadRequest,
 	Unauthorized,
 	PaymentRequired,
 	Forbidden,
 	NotFound,
 	MethodNotAllowed,
 	NotAcceptable,
 	ProxyAuthenticationRequired,
 	RequestTimeout,
 	Conflict,
 	Gone,
 	LengthRequired,
 	PreconditionFailed,
 	ContentTooLarge,
 	URITooLong,
 	UnsupportedMediaType,
 	RangeNotSatisfiable,
 	ExpectationFailed,
 	MisdirectedRequest,
 	UnprocessableContent,
 	Locked,
 	FailedDependency,
 	TooEarly,
 	UpgradeRequired,
 	PreconditionRequired,
 	TooManyRequests,
 	Unassigned,
 	RequestHeaderFieldsTooLarge,
 	UnavailableForLegalReasons,
 	InternalServerError,
 	NotImplemented,
 	BadGateway,
 	ServiceUnavailable,
 	GatewayTimeout,
 	HTTPVersionNotSupported,
 	VariantAlsoNegotiates,
 	InsufficientStorage,
 	LoopDetected,
 	NotExtended,
 	NetworkAuthenticationRequired,
}

provide let getStatusCode = (status: HTTPStatus) => {
  match (status) {
    Continue => 100,
    SwitchingProtocols => 101,
    Processing => 102,
    EarlyHints => 103,
    UploadResumptionSupported => 104,
    OK => 200,
    Created => 201,
    Accepted => 202,
    NonAuthoritativeInformation => 203,
    NoContent => 204,
    ResetContent => 205,
    PartialContent => 206,
    MultiStatus => 207,
    AlreadyReported => 208,
    IMUsed => 226,
    MultipleChoices => 300,
    MovedPermanently => 301,
    Found => 302,
    SeeOther => 303,
    NotModified => 304,
    UseProxy => 305,
    TemporaryRedirect => 307,
    PermanentRedirect => 308,
    BadRequest => 400,
    Unauthorized => 401,
    PaymentRequired => 402,
    Forbidden => 403,
    NotFound => 404,
    MethodNotAllowed => 405,
    NotAcceptable => 406,
    ProxyAuthenticationRequired => 407,
    RequestTimeout => 408,
    Conflict => 409,
    Gone => 410,
    LengthRequired => 411,
    PreconditionFailed => 412,
    ContentTooLarge => 413,
    URITooLong => 414,
    UnsupportedMediaType => 415,
    RangeNotSatisfiable => 416,
    ExpectationFailed => 417,
    MisdirectedRequest => 421,
    UnprocessableContent => 422,
    Locked => 423,
    FailedDependency => 424,
    TooEarly => 425,
    UpgradeRequired => 426,
    PreconditionRequired => 428,
    TooManyRequests => 429,
    Unassigned => 430,
    RequestHeaderFieldsTooLarge => 431,
    UnavailableForLegalReasons => 451,
    InternalServerError => 500,
    NotImplemented => 501,
    BadGateway => 502,
    ServiceUnavailable => 503,
    GatewayTimeout => 504,
    HTTPVersionNotSupported => 505,
    VariantAlsoNegotiates => 506,
    InsufficientStorage => 507,
    LoopDetected => 508,
    NotExtended => 510,
    NetworkAuthenticationRequired => 511,
  }
}

provide record ErrorOptions {
  body: Option<String>,
  status: HTTPStatus,
  page: Option<String>,
}

provide record ViewOptions {
  head: Option<String>,
  partial: Bool,
  placeholders: Map<String, String>,
  page: Option<String>,
  csp: Map<String, String>,
}

provide enum Response {
  ResponseString(String),
  ResponseJson(Json),
  ResponseBlob(Bytes, Option<String>),
  ResponseView(String, Json, Option<ViewOptions>),
  ResponseError(ErrorOptions),
  ResponseRedirect(String, Option<HTTPStatus>),
  ResponseUri(Uri),
}

provide let makeViewOptions = (
  head: Option<String> = None,
  partial: Bool = false,
  placeholders: Map<String, String> = Map.make(),
  page: Option<String> = None,
  csp: Map<String, String> = Map.make(),
) => {
  let options: ViewOptions = {
    head,
    partial,
    placeholders,
    page,
    csp,
  }
  options
}

provide let makeErrorOptions = (
  body: Option<String> = None,
  status: HTTPStatus = NotFound,
  page: Option<String> = None,
) => {
  let options: ErrorOptions = {
    body,
    status,
    page,
  }
  options
}

provide let string = (value: String) => {
  ResponseString(value)
}

provide let json = (value: Json) => {
  ResponseJson(value)
}

provide let blob = (bytes: Bytes, contentType: Option<String> = Some("application/octet-stream")) => {
  ResponseBlob(bytes, contentType)
}

provide let view = (name: String, props: Json = Json.JsonNull, options: Option<ViewOptions> = None) => {
  ResponseView(name, props, options)
}

provide let error = (options: ErrorOptions = makeErrorOptions()) => {
  ResponseError(options)
}

provide let redirect = (route: String, status: Option<HTTPStatus> = None) => {
  ResponseRedirect(route, status)
}

provide let uri = (uri: Uri) => {
  ResponseUri(uri)
}
