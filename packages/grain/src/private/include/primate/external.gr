module External

from "string" include String
from "runtime/unsafe/wasmi32" include WasmI32
from "runtime/unsafe/wasmi64" include WasmI64
from "runtime/unsafe/offsets" include Offsets
from "bytes" include Bytes
from "runtime/dataStructures" include DataStructures
from "json" include Json
from "result" include Result

use WasmI32.{ (+), fromGrain }
use Offsets.{ _BYTES_DATA_OFFSET, _STR_DATA_OFFSET, _UINT64_VALUE_OFFSET }
use Bytes.{ make }
use DataStructures.{ allocateString }
use Json.{ type Json }

provide foreign wasm payloadReceive:
  (WasmI32, WasmI32) => Void from "primate"

provide foreign wasm payloadGetLength:
  () => WasmI32 from "primate"

provide foreign wasm sendPayload:
  (ptr: WasmI32, length: WasmI32) => Void from "primate"

provide foreign wasm newSessionPayload:
  () => Void from "primate"

provide foreign wasm getSessionPayload:
  () => Void from "primate"

@unsafe
provide let toWasmI64 = (value: Uint64) => {
  let result = WasmI64.load(WasmI32.fromGrain(value), _UINT64_VALUE_OFFSET)
  ignore(value)
  result
}

@unsafe
provide let receiveString = () => {
  use WasmI32.{ (+), fromGrain }
  let length = payloadGetLength()
  let stringPtr = allocateString(length)
  payloadReceive(stringPtr, length)
  WasmI32.toGrain(stringPtr): String
}

@unsafe
provide let receiveBytes = () => {
  let length = payloadGetLength()
  let buffer = Bytes.make(WasmI32.toGrain(length): Number)
  let ptr = fromGrain(buffer)
  payloadReceive(ptr + _BYTES_DATA_OFFSET, length)
  ignore(buffer)
  buffer
}

@unsafe
provide let receiveJson = () => {
  let str = receiveString()
  let json = Result.expect("Invalid JSON", Json.parse(str))
  json
}

@unsafe
provide let sendString = (str: String) => {
  let ptr = WasmI32.fromGrain(str) + _STR_DATA_OFFSET
  let byteLength = WasmI32.fromGrain(String.byteLength(str))
  sendPayload(ptr, byteLength)
  ignore(str)
  void
}

@unsafe
provide let sendBytes = (bytes: Bytes) => {
  let ptr = WasmI32.fromGrain(bytes) + _BYTES_DATA_OFFSET
  let byteLength = WasmI32.fromGrain(Bytes.length(bytes))
  sendPayload(ptr, byteLength)
  ignore(bytes)
  void
}

@unsafe
provide let sendJson = (json: Json) => {
  let str = Result.expect("Invalid JSON", Json.toString(json))
  sendString(str)
  void
}
