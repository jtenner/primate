module Store

from "./external.gr" include External
from "string" include String
from "buffer" include Buffer
from "bytes" include Bytes
from "uint32" include Uint32
from "uint64" include Uint64
from "json" include Json
from "runtime/unsafe/conv" include Conv
from "runtime/numbers" include Numbers
from "map" include Map
from "result" include Result
from "option" include Option

use Map.{type Map}
use Json.{type Json}

provide type Store = Number

@unsafe
provide let getStore = (name: String) => {
  let byteLength = String.byteLength(name)
  let payload = Buffer.make(byteLength + 4)
  Buffer.addUint32(Uint32.fromNumber(byteLength), payload)
  Buffer.addString(name, payload)
  let bytes = Buffer.toBytes(payload)
  External.sendBytes(bytes)
  let storeId = External.getStore()
  Conv.wasmI32ToNumber(storeId): Store
}

let callbacks = Map.make(): Map<Uint64, (Json) => Void>
let mut callbackId = 0uL


provide let get = (key: String, store: Store, callback: (Json) => Void) => {
  use Uint64.{ (+) as (+.) }
  // Encode the payload
  let store = Uint32.fromNumber(store)
  let byteLength = String.byteLength(key)
  let payload = Buffer.make(byteLength + 16)
  Buffer.addUint32(store, payload)
  Buffer.addUint32(Uint32.fromNumber(byteLength), payload)
  Buffer.addString(key, payload)
  Buffer.addUint64(callbackId, payload)
  callbackId = callbackId +. 1uL
  let bytes = Buffer.toBytes(payload)
  External.sendBytes(bytes)
  External.getStoreValue()
}

provide let getStoreValueDone = () => {
  let payload = External.receiveBytes()
  let id = Bytes.getUint64(0, payload)
  let jsonSize = Bytes.getUint32(8, payload)
  let jsonStr = Bytes.toString(Bytes.slice(12, Uint32.toNumber(jsonSize), payload))
  let json = Result.expect("Expected Valid JSON.", Json.parse(jsonStr))
  let callback = Option.expect("Expected callback to exist.", Map.get(id, callbacks))
  Map.remove(id, callbacks)
  callback(json)
  void
}
