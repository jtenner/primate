module Request

from "uri" include Uri
from "map" include Map
from "bytes" include Bytes
from "uint32" include Uint32
from "uint64" include Uint64
from "result" include Result
from "./external.gr" include External
from "runtime/unsafe/wasmi32" include WasmI32
from "runtime/dataStructures" include DataStructures

use Uri.{ type Uri }
use Map.{ type Map }

let mut requestID = 0uL

type Dictionary = Map<String, String>

provide enum BodyMapElement {
  BodyMapElementString(String),
  BodyMapElementBytes(Bytes),
}

provide enum Body {
  BodyNull,
  BodyString(String), // 0
  BodyMap(Map<String, BodyMapElement>)
}

record RequestRecord {
  url: Uri,
  body: Body,
  path: Dictionary,
  query: Dictionary,
  headers: Dictionary,
  cookies: Dictionary,
}

let requestMap = Map.make(): Map<Uint64, RequestRecord>

provide exception InvalidRequestEncoding
provide exception InvalidRequestHeader

provide type Request = Uint32

let _URI_SECTION = 0ul
let _BODY_SECTION = 1ul
let _PATH_SECTION = 2ul
let _QUERY_SECTION = 3ul
let _HEADERS_SECTION = 4ul
let _COOKIES_SECTION = 5ul

let _BODY_NULL = 0ul

let _BODY_MAP_ELEMENT_KIND_STRING = 0ul
let _BODY_MAP_ELEMENT_KIND_BYTES = 1ul

let _getSectionMap = (id: Uint32, offset: Number, payload: Bytes) => {
  use Uint32.{ (+) as (+.), (<), toNumber }

  let header = Bytes.getUint32(offset, payload)
  if (header != id) throw InvalidRequestHeader

  let count = Bytes.getUint32(offset + 4, payload)
  let mut offset = offset + 8

  let map = Map.make()

  let mut i = 0ul
  while (i < count) {
    let keySize = Bytes.getUint32(offset, payload)
    let key = Bytes.slice(offset + 4, toNumber(keySize), payload)
    let keyString = toString(key)
    offset += 4 + toNumber(keySize)

    let valueSize = Bytes.getUint32(offset, payload)
    let value = Bytes.slice(offset + 4, toNumber(valueSize), payload)
    offset += 4 + toNumber(valueSize)
    let valueString = toString(value)
    Map.set(keyString, valueString, map)
    i = i +. 1ul
  }

  (offset, map)
}


@unsafe
provide let make = () => {
  use Bytes.{ getUint32, slice, toString }
  use Uint32.{ toNumber, (<), (+) as (+.) }
  use Uint64.{ (+) as (+..) }
  let payload = External.receiveBytes()
  
  // Section 1
  let mut offset = 0

  let header0 = Bytes.getUint32(offset, payload)
  if (header0 != _URI_SECTION) throw InvalidRequestEncoding

  let uriSize = Bytes.getUint32(offset + 4, payload)
  let uriString = Bytes.slice(offset + 8, toNumber(uriSize), payload)
  let url = Result.expect("Invalid URL", Uri.parse(toString(uriString)))

  // Section 2
  offset += 8 + toNumber(uriSize)
  let header1 = Bytes.getUint32(offset, payload)
  if (header1 != _BODY_SECTION) throw InvalidRequestEncoding

  let bodyKind = Bytes.getUint32(offset + 4, payload)
  offset += 8

  let body = match (bodyKind) {
    0ul => BodyNull,
    1ul => {
      let stringSize = Bytes.getUint32(offset, payload)
      let string = Bytes.slice(offset + 4, toNumber(stringSize), payload)
      offset += 4 + toNumber(stringSize)
      BodyString(toString(string))
    },
    2ul => {
      let count = Bytes.getUint32(offset, payload)
      offset += 4
      let map = Map.make()
      
      let mut i = 0ul

      while (i < count) {
        // get the key
        let keySize = Bytes.getUint32(offset, payload)
        let key = Bytes.slice(offset + 4, toNumber(keySize), payload)
        offset += 4 + toNumber(keySize)
        let keyString = toString(key)

        let valueKind = Bytes.getUint32(offset, payload)
        let valueSize = Bytes.getUint32(offset + 4, payload)
        let value = Bytes.slice(offset + 8, toNumber(valueSize), payload)
        offset += 8 + toNumber(valueSize)
        let value = match (valueKind) {
          // 
          0ul => BodyMapElementString(toString(value)),
          1ul => BodyMapElementBytes(value),
          _ => throw InvalidRequestEncoding,
        }
        Map.set(keyString, value, map)
        i = i +. 1ul
      }
      
      BodyMap(map)
    },
    _ => throw InvalidRequestEncoding,
  }

  let (offset, path) = _getSectionMap(_PATH_SECTION, offset, payload)
  let (offset, query) = _getSectionMap(_QUERY_SECTION, offset, payload)
  let (offset, headers) = _getSectionMap(_HEADERS_SECTION, offset, payload)
  let (offset, cookies) = _getSectionMap(_COOKIES_SECTION, offset, payload)

  let request = {
    url,
    body,
    path,
    query,
    headers,
    cookies,
  }

  let id = requestID
  requestID = requestID +.. 1uL
  
  Map.set(id, request, requestMap)
  External.toWasmI64(id)
}

@unsafe
provide let finish = (request: WasmI64) => {
  let request = WasmI32.toGrain(DataStructures.newUint64(request)): Uint64
  Map.remove(request, requestMap)
}
